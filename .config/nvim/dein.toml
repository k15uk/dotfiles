## 1. Vim プラグイン管理 ####
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#auto_recache = 1
'''

## 2. colorscheme ####
[[plugins]]
repo = 'jnurmine/Zenburn'

## 3. vim 拡張 ####
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
  nnoremap <silent>F :call OpenDeniteBufferDirFile()<CR>
  let s:denite_win_width_percent = 1
  let s:denite_win_height_percent = 0.5

  function! OpenDeniteBufferDirFile()
    " Update denite default options
    call denite#custom#option('default', {
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) - 2),
      \ })
    DeniteBufferDir file file:new
    highlight NormalFloat ctermbg=black guibg=none
  endfunction
'''

[plugins.ftplugin]
denite = '''
  nnoremap <silent><buffer><expr> <CR>  denite#do_map('do_action')
  nnoremap <silent><buffer><expr> l     denite#do_map('do_action')
  nnoremap <silent><buffer><expr> <BS>  denite#do_map('move_up_path')
  nnoremap <silent><buffer><expr> h     denite#do_map('move_up_path')
  nnoremap <silent><buffer><expr> <esc> denite#do_map('quit')
  nnoremap <silent><buffer><expr> q     denite#do_map('quit')
  nnoremap <silent><buffer><expr> p     denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> i     denite#do_map('open_filter_buffer')
'''

## 4. LSP ####
# 非同期補完
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
depends = [ 'async.vim' ]
hook_add = '''
  set completeopt+=preview
  let g:asyncomplete_smart_completion = 1
  let g:asyncomplete_auto_popup = 1
  let g:asyncomplete_remove_duplicates = 1
  " 補完表示時のEnterで改行をしない
  inoremap <expr> <CR> pumvisible() ? "\<C-y>\<Esc>a" : "\<CR>"
  inoremap <expr> <C-j> pumvisible() ? "\<Down>" : "\<C-j>"
  inoremap <expr> <C-k> pumvisible() ? "\<Up>" : "\<C-k>"
  inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = [ 'async.vim' ]
hook_add = '''
  setlocal omnifunc=lsp#complete
  nnoremap <silent><leader>j :LspDefinition<CR>
  nnoremap <silent><leader>h :LspHover<CR>
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_async_completion = 1
  set foldmethod=expr
  \ foldexpr=lsp#ui#vim#folding#foldexpr()
  \ foldtext=lsp#ui#vim#folding#foldtext()
  nnoremap <silent><S-h> zc
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = [ 'vim-lsp']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = [ 'asyncomplete.vim', 'vim-lsp']

[[plugins]]
repo = 'k15uk/lsp_sidebar.vim'
hook_add = '''
  nnoremap <S-l> :call lsp_sidebar#toggle()<CR>
'''

## 5. スニペット ####
[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger='<c-h>'
  let g:UltiSnipsListSnippets="<c-l>"
  let g:UltiSnipsJumpForwardTrigger="<c-j>"
  let g:UltiSnipsJumpBackwardTrigger="<c-k>"

  let g:UltiSnipsEditSplit="vertical"
  let g:UltiSnipsSnippetDirectories=['snippets'.'dein/repos/github.com/honza/vim-snippets/UltiSnips']
'''

[[plugins]]
repo = 'honza/vim-snippets'

# fzf で現在のファイルタイプに応じたスニペットを絞り込み可能
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap <silent><c-s> :Snippet<CR>
'''

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-snippets'
depends = [ 'vim-lsp' ]

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-ultisnips'
depends = [ 'ultisnips' , 'async.vim' , 'vim-lsp' ]

## 6. 表示関係 ####
#bufferをタブバーに表示
[[plugins]]
repo = 'ap/vim-buftabline'

#ステータスライン表示拡張
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'active': {
  \   'left'  : [ [ 'mode', 'paste' ],
  \               [ 'filename' , 'readonly'],
  \               [ 'modified' ]
  \             ],
  \    'right' : [ [ 'lineinfo'],
  \               [ 'percent' ],
  \               [ 'fileencoding', 'fileformat', 'filetype' ]
  \             ],
  \           },
  \ 'component_function': {
  \   },
  \ }
'''

## 0. other ####
# git
[[plugins]]
repo = 'airblade/vim-gitgutter'

# コメント
[[plugins]]
repo = 'tomtom/tcomment_vim'
depends = [ 'vim-precious' ]
hook_add = '''
  nnoremap ,, :PreciousSwitch<CR>:TComment<CR>:PreciousReset<CR>
  vnoremap ,, :PreciousSwitch<CR>:TComment<CR>:PreciousReset<CR>
'''

# surround
[[plugins]]
repo = 'tpope/vim-surround'

# indent guide
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

# 括弧を自動で閉じてくれる
[[plugins]]
repo = 'Townk/vim-autoclose'
hook_add = '''
  " 補完のキーバインドに割り当てているpumvisible()が挿入される対策
  let g:AutoClosePreserveDotReg = 0
'''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# カーソル位置に応じてファイルタイプの自動切り替え
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = [ 'vim-quickrun' , 'context_filetype.vim' ]
hook_add = '''
  let g:precious_enable_switch_CursorMoved = { '*': 0 }
  augroup test
		autocmd!
		autocmd InsertEnter * :PreciousSwitch
		autocmd InsertLeave * :PreciousReset
	augroup END
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = '''
  nnoremap tt :TableModeToggle<cr>
  nnoremap tr :TableModeRealign<cr>
'''

[[plugins]]
repo = 'gko/vim-coloresque'

# 行末ホワイトスペースの削除
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

# normalモードに切り替え時にibusをdefault_imに切り替え insertモードに切り替え時元のimに戻す
[[plugins]]
repo = 'k15uk/ibus_toggle.vim'
hook_add = '''
  let g:ibus_toggle_default_im = 'xkb:us::eng'
'''

# vim:fenc=utf-8 ff=unix ft=toml
