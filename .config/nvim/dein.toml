##Vim プラグイン管理
####################

[[plugins]]
repo = 'Shougo/dein.vim'

#colorscheme
[[plugins]]
repo = 'jnurmine/Zenburn'

##vim ユーティリティ
####################

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
nnoremap <silent><leader>f :call OpenDeniteBufferDirFile()<CR>
let s:denite_win_width_percent = 0.95
let s:denite_win_height_percent = 0.4

set pumblend=10

augroup denite_settings
  autocmd!
  autocmd FileType denite set winblend=10
  autocmd FileType denite-filter set winblend=10
augroup END

function! OpenDeniteBufferDirFile()
  " Update denite default options
  call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) - 2),
    \ })
  DeniteBufferDir file file:new
  highlight NormalFloat ctermbg=black guibg=none
endfunction
'''

[plugins.ftplugin]
denite = '''
nnoremap <silent><buffer><expr> <CR>  denite#do_map('do_action')
nnoremap <silent><buffer><expr> l     denite#do_map('do_action')
nnoremap <silent><buffer><expr> <BS>  denite#do_map('move_up_path')
nnoremap <silent><buffer><expr> h     denite#do_map('move_up_path')
nnoremap <silent><buffer><expr> <esc> denite#do_map('quit')
nnoremap <silent><buffer><expr> q     denite#do_map('quit')
nnoremap <silent><buffer><expr> p     denite#do_map('do_action', 'preview')
nnoremap <silent><buffer><expr> i     denite#do_map('open_filter_buffer')
'''

[[plugins]]
repo = 'k15uk/ibus_toggle.vim'
hook_add = '''
let g:ibus_toggle_default_im = 'xkb:us::eng'
'''

##テキスト編集機能拡張
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
depends = [ 'async.vim' ]

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = [ 'async.vim' ]

hook_add = '''
au User lsp_setup call <sid>lsp_load()

function! s:lsp_load()
  setlocal omnifunc=lsp#complete
  nnoremap <silent><C-b> :LspDefinition<CR>
  nnoremap <silent><C-h> :LspHover<CR>
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_async_completion = 1

  " Automatically start language servers.
  let g:LanguageClient_autoStart = 1

  if executable('javascript-typescript-stdio')
    call lsp#register_server({
    \ 'name': 'javascript-typescript-stdio',
    \ 'cmd': {server_info->['javascript-typescript-stdio']},
    \ 'root_uri': { server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_directory(lsp#utils#get_buffer_path(), '.git/..'))},
    \ 'whitelist': ['javascript', 'typescript', 'javascript.jsx', 'typescript.tsx'],
    \ })
  endif

  if executable('intelephense-server')
    call lsp#register_server({
    \ 'name': 'intelephense-server',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'intelephense-server --stdio']},
    \ 'whitelist': ['php'],
    \ })
  endif

  if executable('jdtls')
    call lsp#register_server({
    \ 'name': 'jdtls',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'jdtls']},
    \ 'whitelist': ['java'],
    \ })
  endif

  if executable('css-languageserver')
    call lsp#register_server({
    \ 'name': 'css-languageserver',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'css-languageserver --stdio']},
    \ 'whitelist': ['css', 'less', 'sass'],
    \ })
  endif

  if executable('html-languageserver')
    call lsp#register_server({
    \ 'name': 'html-languageserver',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'html-languageserver --stdio']},
    \ 'whitelist': ['html'],
    \ })
  endif

  if executable('bash-language-server')
    call lsp#register_server({
    \ 'name': 'bash-language-server',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
    \ 'whitelist': ['sh'],
    \ })
  endif

  if executable('json-languageserver')
    call lsp#register_server({
    \ 'name': 'json-languageserver',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'json-languageserver --stdio']},
    \ 'whitelist': ['json'],
    \ })
  endif

  if executable('vls')
    call lsp#register_server({
    \ 'name': 'vue-language-server',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'vls --stdio']},
    \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'package.json'))},
    \ 'whitelist': ['vue'],
    \ })
  endif

  if executable('clangd')
    call lsp#register_server({
    \ 'name': 'clangd',
    \ 'cmd': {server_info->['clangd']},
    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
    \ })
  endif

  if executable('lua-lsp')
    call lsp#register_server({
    \ 'name': 'lua-lsp',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'lua-lsp']},
    \ 'whitelist': ['lua'],
    \ })
  endif

  if executable('pyls')
    call lsp#register_server({
    \ 'name': 'pyls',
    \ 'cmd': {server_info->['pyls']},
    \ 'whitelist': ['python'],
    \ })
  endif

  if executable('go-langserver')
    call lsp#register_server({
    \ 'name': 'go-langserver',
    \ 'cmd': {server_info->['go-langserver', '-gocodecompletion']},
    \ 'whitelist': ['go'],
    \ })
  endif

  if executable('solargraph')
    call lsp#register_server({
    \ 'name': 'solargraph',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'splargraph stdio']},
    \ 'whitelist': ['ruby'],
    \ })
  endif
endfunction!
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = [ 'asyncomplete.vim', 'vim-lsp']

#bufferをタブバーに表示
[[plugins]]
repo = 'ap/vim-buftabline'

#ステータスライン表示拡張
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'active': {
  \   'left'  : [ [ 'mode', 'paste' ],
  \               [ 'filename' , 'readonly'],
  \               [ 'modified' ]
  \             ],
  \    'right' : [ [ 'lineinfo'],
  \               [ 'percent' ],
  \               [ 'fileencoding', 'fileformat', 'filetype' ]
  \             ],
  \           },
  \ 'component_function': {
  \   },
  \ }
'''

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'

#コメントをトグル
[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  nnoremap ,, :TComment<CR>
  vnoremap ,, :TComment<CR>
'''

# vim:fenc=utf-8 ff=unix ft=conf
