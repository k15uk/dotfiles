## 1. Vim プラグイン管理 ####
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  let g:dein#auto_recache = 1
'''

## 2. colorscheme ####
[[plugins]]
repo = 'jnurmine/Zenburn'
hook_add = '''
  colorscheme zenburn
'''

## 3. vim 拡張 ####
# edit history, Undo/Redo history
[[plugins]]
repo = 'sjl/gundo.vim'

## 4. LSP / 補完 ###
[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
depends = [ 'async.vim' ]
hook_add = '''
  set completeopt+=preview
  let g:asyncomplete_smart_completion = 1
  let g:asyncomplete_auto_popup = 1
  let g:asyncomplete_remove_duplicates = 1
  " 補完表示時のEnterで改行をしない
  inoremap <expr> <CR> pumvisible() ? "\<C-y>\<Esc>a" : "\<CR>"
  inoremap <expr> <C-j> pumvisible() ? "\<Down>" : "\<C-j>"
  inoremap <expr> <C-k> pumvisible() ? "\<Up>" : "\<C-k>"
  inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
depends = [ 'async.vim' ]
hook_add = '''
  setlocal omnifunc=lsp#complete
  nnoremap <silent>L :LspDocumentSymbol<CR>
  nnoremap <silent><c-l> :LspDefinition<CR>
  nnoremap <silent>H :LspHover<CR>
  nnoremap <silent>E :LspNextError<CR>
  nnoremap <silent>W :LspNextWarning<CR>

  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_async_completion = 1

  let g:lsp_signs_enabled = 1
  let g:lsp_virtual_text_enabled = 1
  let g:lsp_signs_error = {'text': '✗'}
  let g:lsp_signs_warning = {'text': '‼'}
  let g:lsp_signs_information = {'text': 'i'}
  let g:lsp_signs_hint = {'text': '?'}

  augroup VimLspSettings
    autocmd!
    autocmd BufWritePre <buffer> LspDocumentFormatSync
    autocmd FileType qf call s:lsp_quickfix_setting()
  augroup END

  function! s:lsp_quickfix_setting() abort
    nnoremap <Esc> :close<CR>
    nnoremap <buffer> <cr> <cr>:cclose<cr>
  endfunction
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = [ 'vim-lsp']

[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
depends = [ 'asyncomplete.vim', 'vim-lsp']

## 5. スニペット ####
[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger='<c-h>'
  let g:UltiSnipsListSnippets="<c-l>"
  let g:UltiSnipsJumpForwardTrigger="<c-j>"
  let g:UltiSnipsJumpBackwardTrigger="<c-k>"

  let g:UltiSnipsEditSplit="vertical"
  let g:UltiSnipsSnippetDirectories=['snippets'.'dein/repos/github.com/honza/vim-snippets/UltiSnips']
'''

[[plugins]]
repo = 'honza/vim-snippets'

# fzf で現在のファイルタイプに応じたスニペットを絞り込み可能
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap <silent>s :Snippet<CR>
'''

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-snippets'
depends = [ 'vim-lsp' ]

[[plugins]]
repo = 'thomasfaingnaert/vim-lsp-ultisnips'
depends = [ 'ultisnips' , 'async.vim' , 'vim-lsp' ]

## 6. 表示関係 ####
#ステータスライン表示拡張
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'FugitiveHead'
  \ },
  \ }
'''

## 0. other ####
# git
[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

# リファレンスビューワー
[[plugins]]
repo = 'sunaku/vim-dasht'
hook_add = '''
  nnoremap <silent>K :call Dasht( dasht#cursor_search_terms() )<CR>
  vnoremap <silent>K y:<C-U>call Dasht( getreg(0) )<CR>
  let g:dasht_results_window = 'enew'
'''

# コメント
[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  nnoremap ,, :TComment<CR>
  vnoremap ,, :TComment<CR>
'''

# surround
[[plugins]]
repo = 'tpope/vim-surround'

# indent guide
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

# 括弧を自動で閉じてくれる
[[plugins]]
repo = 'Townk/vim-autoclose'
hook_add = '''
  " 補完のキーバインドに割り当てているpumvisible()が挿入される対策
  let g:AutoClosePreserveDotReg = 0
'''

# カラーコードに応じて着色
[[plugins]]
repo = 'gko/vim-coloresque'

[[plugins]]
# 翻訳
repo = 'VincentCordobes/vim-translate'
hook_add = '''
  let g:translate#default_languages = {
      \ 'ja': 'en',
      \ 'en': 'ja'
      \ }
  nnoremap <silent> T :Translate<CR>
  vnoremap <silent> T :TranslateVisual<CR>
  vnoremap <silent> R :TranslateReplace<CR>
'''

# normalモードに切り替え時にibusをdefault_imに切り替え insertモードに切り替え時元のimに戻す
[[plugins]]
repo = 'k15uk/ibus_toggle.vim'
hook_add = '''
  let g:ibus_toggle_default_im = 'xkb:us::eng'
'''

# vim:fenc=utf-8 ff=unix ft=toml
